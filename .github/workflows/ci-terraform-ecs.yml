# name: CI/CD Pipeline for ECS Fargate

# on:
#   push:
#     branches: [ "develop", "main" ]
#   pull_request:
#     branches: [ "develop", "main" ]

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check out repo
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '20'

#       - name: Install dependencies
#         run: npm ci
#         working-directory: templates/Terraform-ECS/services/products

#       - name: Run tests
#         run: npm test
#         working-directory: templates/Terraform-ECS/services/products

#       - name: Build (local artifacts)
#         run: npm run build
#         working-directory: templates/Terraform-ECS/services/products


#   infra:
#     runs-on: ubuntu-latest
#     needs: build-and-test
#     permissions:
#       id-token: write
#       contents: read
#     steps:
#       - name: Check out repo
#         uses: actions/checkout@v2

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Configure AWS Credentials (OIDC)
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: arn:aws:iam::992382555562:role/githubAccess
#           aws-region: us-east-1

#       - name: Terraform Init
#         run: terraform init
#         working-directory: templates/Terraform-ECS/terraform

#       - name: Terraform Apply
#         run: terraform apply -auto-approve
#         working-directory: templates/Terraform-ECS/terraform

#   deploy-dev:
#     runs-on: ubuntu-latest
#     needs: [build-and-test, infra]
#     permissions:
#       id-token: write
#       contents: read
#     # Only run this job if on 'dev' branch
#     if: github.ref == 'refs/heads/develop'
#     steps:
#       - name: Check out repo
#         uses: actions/checkout@v2

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '20'

#       - name: Install dependencies
#         run: npm ci
#         working-directory: templates/Terraform-ECS/services/products

#       # 1) Configure AWS credentials so we can push to ECR & update ECS
#       - name: Configure AWS Credentials (OIDC)
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: arn:aws:iam::992382555562:role/githubAccess
#           aws-region: us-east-1


#       # 2) Log in to Amazon ECR
#       - name: Log in to Amazon ECR
#         uses: aws-actions/amazon-ecr-login@v1

#       # 3) Build Docker image (tagging with 'latest' or a unique tag)
#       - name: Build Docker Image
#         run: |
#           docker build \
#             -t 992382555562.dkr.ecr.us-east-1.amazonaws.com/products:latest \
#             -f templates/Terraform-ECS/services/products/Dockerfile \
#             templates/Terraform-ECS/services/products

#       # 4) Push Docker image to ECR
#       - name: Push Docker Image
#         run: |
#           docker push 992382555562.dkr.ecr.us-east-1.amazonaws.com/products:latest

#       # 5) Update ECS Fargate service to use new image
#       - name: Force new deployment
#         run: |
#           aws ecs update-service \
#             --cluster my-ecs-cluster \
#             --service my-fargate-service \
#             --force-new-deployment
