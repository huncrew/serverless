name: CI/CD Pipeline for ECS Fargate

on:
  push:
    branches: [ "develop", "main", "dev" ]
  pull_request:
    branches: [ "develop", "main", "dev" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: services/products

      - name: Run tests
        run: npm test
        working-directory: services/products

      - name: Build (local artifacts)
        run: npm run build
        working-directory: services/products

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-test
    # Only run this job if on 'dev' branch
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        working-directory: services/products

      # 1) Configure AWS credentials so we can push to ECR & update ECS
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::992382555562:role/githubAccess
          aws-region: us-east-1


      # 2) Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 3) Build Docker image (tagging with 'latest' or a unique tag)
      - name: Build Docker Image
        run: |
          docker build \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/products:latest \
            -f services/products/Dockerfile \
            services/products

      # 4) Push Docker image to ECR
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/products:latest

      # 5) Update ECS Fargate service to use new image
      - name: Force new deployment
        run: |
          aws ecs update-service \
            --cluster my-ecs-cluster \
            --service my-fargate-service \
            --force-new-deployment
